# Data-Structure

//在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针

struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
    ListNode* deleteDuplication(ListNode* pHead)
    {
         //该题的链表应为顺序链表
        //思路：当为空链表或者只有一个结点时返回该链表，当有两个或两个以上结点再比较
        //设三个指针 prev = NULL， cur = pHead， pnext = cur->next 每次当next != NULL时方可判断
        //如果cur->val == next->val时，删除掉重复元素，else 继续遍历
        
        if (pHead == NULL || pHead->next == NULL)
            return pHead;
        
        struct ListNode* prev = NULL;
        struct ListNode* cur = pHead;
        struct ListNode* pnext = cur->next;
        
        while (pnext != NULL)
        {
            if (cur->val == pnext->val)
            {
                while(pnext != NULL && cur->val == pnext->val) //找重复元素
                {
                    pnext = pnext->next;
                }
                
                if (prev != NULL)
                {
                    prev->next = pnext; //除去重复元素后
                }
                else
                {
                    prev = pHead; //当链表头为重复元素时
                }
                
                while (cur != pnext) //删除掉重复元素,直到cur=next指针位置时，即把所有重复元素删除
                {
                    struct ListNode* tmp = cur;
                    cur = cur->next;
                    free(tmp);
                }
                cur = pnext; //迭代
                
                while (prev != NULL) //此时next、prev、cur 均指向一处 恰重复元素在链表尾，则结束，反之，next = next->next继续遍历
                {
                   pnext = pnext->next;
                }
            }
            
            else
            {
                prev = cur;
                cur = pnext;
                pnext = pnext->next;
            }
        }
    }
};
